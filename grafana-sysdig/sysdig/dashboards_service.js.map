{"version":3,"sources":["../src/dashboards_service.js"],"names":["fetchDefaultDashboards","backend","ApiService","send","url","then","result","data","defaultDashboards","version","backendSrv","$q","reject","catch","fetchDashboards","Array","isArray","dashboards","length","removeDashboards","removeNextDashboard","slice","resolve","dashboard","nextDashboards","deleteDashboard","uid","error","console","MetricsService","SysdigDashboardHelper","DashboardsService","datasourceName","dashboardSetId","info","tags","all","results","applicableDashboards","usedCategories","drilldownViewsCategories","filter","category","find","id","undefined","categories","convertedDashboards","map","convertDashboard","bind","options","overwrite","saveDashboards","name","message","filterDashboardBySetId","convertToGrafana","arguments","saveDashboard","log","title","when","search","type","filterSysdigDashboards","indexOf"],"mappings":"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","file":"dashboards_service.js","sourcesContent":["//\n//  Copyright 2018 Draios Inc.\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n//\nimport ApiService from './api_service';\nimport MetricsService from './metrics_service';\nimport SysdigDashboardHelper from './sysdig_dashboard_helper';\n\nexport default class DashboardsService {\n    static importFromSysdig(backend, datasourceName, dashboardSetId) {\n        console.info('Sysdig dashboards import: Starting...');\n\n        if (dashboardSetId === 'DEFAULT') {\n            const tags = ['Sysdig', 'Default dashboard'];\n            return backend.backendSrv.$q\n                .all([\n                    fetchDefaultDashboards(backend),\n                    ApiService.send(backend, {\n                        url: 'data/drilldownViewsCategories.json'\n                    })\n                ])\n                .then((results) => {\n                    const applicableDashboards = results[0].defaultDashboards;\n\n                    const usedCategories = results[1].data.drilldownViewsCategories.filter(\n                        (category) => {\n                            return (\n                                applicableDashboards.find(\n                                    (dashboard) => dashboard.category === category.id\n                                ) !== undefined\n                            );\n                        }\n                    );\n\n                    return {\n                        categories: usedCategories,\n                        defaultDashboards: applicableDashboards,\n                        version: results[0].version\n                    };\n                })\n                .then((results) => {\n                    const convertedDashboards = results.defaultDashboards\n                        .map(\n                            convertDashboard.bind(\n                                null,\n                                datasourceName,\n                                results.version,\n                                results.categories,\n                                tags\n                            )\n                        )\n                        .filter((dashboard) => dashboard !== null);\n\n                    const options = {\n                        overwrite: true\n                    };\n\n                    return saveDashboards(backend.backendSrv, convertedDashboards, options);\n                })\n                .then((result) => {\n                    console.info('Sysdig dashboards import: Completed');\n\n                    return result;\n                })\n                .catch((error) => {\n                    console.info('Sysdig dashboards import: Failed', error);\n\n                    return backend.backendSrv.$q.reject(error);\n                });\n        } else {\n            let tags;\n            switch (dashboardSetId) {\n                case 'PRIVATE':\n                    tags = ['Sysdig', 'Private dashboard'];\n                    break;\n                case 'SHARED':\n                    tags = ['Sysdig', 'Shared dashboard'];\n                    break;\n                default:\n                    throw {\n                        name: 'Invalid argument',\n                        message: `Invalid dashboard set ID ('${dashboardSetId}')`\n                    };\n            }\n\n            return fetchDashboards(backend)\n                .then((result) => {\n                    const convertedDashboards = result.dashboards\n                        .filter(\n                            SysdigDashboardHelper.filterDashboardBySetId.bind(\n                                null,\n                                result.version,\n                                dashboardSetId\n                            )\n                        )\n                        .map(convertDashboard.bind(null, datasourceName, result.version, [], tags))\n                        .filter((dashboard) => dashboard !== null);\n\n                    const options = {\n                        overwrite: true\n                    };\n\n                    return saveDashboards(backend.backendSrv, convertedDashboards, options);\n                })\n                .then((result) => {\n                    console.info('Sysdig dashboards import: Completed');\n\n                    return result;\n                })\n                .catch((error) => {\n                    console.info('Sysdig dashboards import: Failed', error);\n\n                    return backend.backendSrv.$q.reject(error);\n                });\n        }\n\n        function convertDashboard(datasourceName, version, categories, tags, dashboard) {\n            try {\n                return SysdigDashboardHelper.convertToGrafana(version, dashboard, {\n                    datasourceName,\n                    categories,\n                    tags\n                });\n            } catch (error) {\n                console.error(\n                    'An error occurred during the dashboard conversion',\n                    error,\n                    arguments\n                );\n                return null;\n            }\n        }\n\n        function saveDashboards(backendSrv, dashboards, options) {\n            if (dashboards.length > 0) {\n                const dashboard = dashboards[0];\n                return backendSrv.saveDashboard(dashboard, options).then(() => {\n                    console.log(`Sysdig dashboards import: Imported '${dashboard.title}'`);\n\n                    return saveDashboards(backendSrv, dashboards.slice(1), options);\n                });\n            } else {\n                return backendSrv.$q.when({});\n            }\n        }\n    }\n\n    static delete(backendSrv) {\n        backendSrv\n            .search({\n                type: 'dash-db',\n                tags: ['Sysdig', 'sysdig']\n            })\n            .then(filterSysdigDashboards)\n            .then((dashboards) => {\n                console.log(`Sysdig dashboards: Delete ${dashboards.length} dashboards...`);\n\n                removeDashboards(backendSrv, dashboards);\n            });\n\n        function filterSysdigDashboards(dashboards) {\n            // NOTE: Up to Grafana v6.1, search over 2 tags doesn't work, the list will include dashboards without tags as well\n            // Current workaround is to filter based on tags returned by each dashboard configuration\n            return dashboards.filter(\n                (dashboard) =>\n                    dashboard.tags &&\n                    (dashboard.tags.indexOf('sysdig') >= 0 || dashboard.tags.indexOf('Sysdig') >= 0)\n            );\n        }\n    }\n}\n\nfunction fetchDefaultDashboards(backend) {\n    return (\n        // First try latest endpoint version\n        ApiService.send(backend, {\n            url: 'api/v2/defaultDashboards?excludeMissing=true'\n        })\n            // Return v2 dashboards\n            .then((result) => {\n                if (result.data.defaultDashboards) {\n                    return {\n                        defaultDashboards: result.data.defaultDashboards,\n                        version: 'v2'\n                    };\n                } else {\n                    //\n                    // dev version of v2 detected, fallback to v1\n                    // (api/v2/defaultDashboards returns an array and not and object with defaultDashboards array)\n                    // NOTE: This is useful until onprem version X and SaaS version Y need to be supported\n                    //\n                    return backend.backendSrv.$q.reject('Dashboards API v2 not available');\n                }\n            })\n            .catch(() => {\n                return (\n                    // Then try older endpoint version\n                    ApiService.send(backend, {\n                        url: 'api/defaultDashboards?excludeMissing=true'\n                    })\n                        // Return v1 dashboards\n                        .then((result) => {\n                            return {\n                                defaultDashboards: result.data.defaultDashboards,\n                                version: 'v1'\n                            };\n                        })\n                );\n            })\n    );\n}\n\nfunction fetchDashboards(backend) {\n    return (\n        // First try latest endpoint version\n        ApiService.send(backend, {\n            url: 'api/v2/dashboards'\n        })\n            // Return v2 dashboards\n            .then((result) => {\n                if (Array.isArray(result.data.dashboards) && result.data.dashboards.length > 0) {\n                    return {\n                        dashboards: result.data.dashboards,\n                        version: 'v2'\n                    };\n                } else {\n                    //\n                    // probable dev version of v2 detected, fallback to v1\n                    // (api/v2/dashboards was not documented or used, it's supposed to be empty -- NOTE: could lead to false positive in case there are no dashboards to import)\n                    // NOTE: This is useful until onprem version X and SaaS version Y need to be supported\n                    //\n                    return backend.backendSrv.$q.reject('Dashboards API v2 not available');\n                }\n            })\n            .catch(() => {\n                return (\n                    // Then try older endpoint version\n                    ApiService.send(backend, {\n                        url: 'ui/dashboards'\n                    })\n                        // Return v1 dashboards\n                        .then((result) => {\n                            return {\n                                dashboards: result.data.dashboards,\n                                version: 'v1'\n                            };\n                        })\n                );\n            })\n    );\n}\n\nfunction removeDashboards(backendSrv, dashboards) {\n    if (dashboards.length > 0) {\n        return removeNextDashboard(backendSrv, dashboards[0], dashboards.slice(1));\n    } else {\n        return backendSrv.$q.resolve();\n    }\n}\n\nfunction removeNextDashboard(backendSrv, dashboard, nextDashboards) {\n    return backendSrv\n        .deleteDashboard(dashboard.uid)\n        .then(() => removeDashboards(backendSrv, nextDashboards))\n        .catch((error) => {\n            console.error('Error deleting dashboard', dashboard.uid, error);\n            removeDashboards(backendSrv, nextDashboards);\n        });\n}\n"]}