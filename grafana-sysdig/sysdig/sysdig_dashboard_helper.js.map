{"version":3,"sources":["../src/sysdig_dashboard_helper.js"],"names":["getGrafanaVersion","grafanaBootData","settings","buildInfo","version","SysdigDashboardHelper","sysdigDashboard","options","getHelper","convertToGrafana","setId","dashboard","filterDashboardBySetId","SysdigDashboardHelperV1","SysdigDashboardHelperV2","name","message","panels","items","widgets","map","panel","index","builder","getPanelBuilder","build","getParsers","filter","r","isRowMandatory","indexOf","dashboardPanelsConfiguration","forEach","span","gridPos","w","rows","reduce","acc","length","x","push","categoryTags","category","split","part","categoryId","categories","find","id","Object","assign","schemaVersion","title","tags","timezone","time","from","to","graphTooltip","showAs","TimeSeriesBuilder","TimeSeriesAreaBuilder","HistogramBuilder","BarChartBuilder","NumberBuilder","TableBuilder","TextBuilder","console","warn","DefaultBuilder","isShared","parseMetric","metric","metricId","replace","timeAggregation","aggregation","shared","GRAFANA_COLUMN_COUNT","SYSDIG_COLUMN_COUNT","BaseBuilder","sysdigPanel","layout","gridConfiguration","h","Math","ceil","size_y","size_x","col","y","floor","row","scope","filterExpression","type","getPanelType","datasource","datasourceName","getTargetGridLayout","valueMetric","metrics","metricConfiguration","_","m","undefined","isRate","parsers","getBasePanelConfiguration","targets","buildTargets","legend","show","yaxes","buildPanelYAxes","values","keys","getValues","getKeys","value","i","refId","toString","isSingleDataPoint","isTabularFormat","target","groupAggregation","segmentBy","key","getTargetFilter","sortDirection","getTargetSortDirection","pageLimit","getTargetPageLimit","normalizedDisplayOptions","valueLimit","direction","count","customDisplayOptions","Number","parseInt","parseValueLimitCount","yAxisLogBase","yAxisScale","baseAxisConfig","label","logBase","min","max","format","getValueFormat","yAxisLeftDomain","args","stack","fill","bars","lines","xaxis","buckets","histogram","numberOfBuckets","mode","getValue","transform","sort","desc","styles","pattern","unit","decimals","filterMetrics","content","getContent","transparent","hasTransparentBackground","markdownSource","panelType"],"mappings":"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","file":"sysdig_dashboard_helper.js","sourcesContent":["//\n//  Copyright 2018 Draios Inc.\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n//\n/* global grafanaBootData */\n\nexport default class SysdigDashboardHelper {\n    static convertToGrafana(version, sysdigDashboard, options) {\n        return SysdigDashboardHelper.getHelper(version).convertToGrafana(sysdigDashboard, options);\n    }\n\n    static filterDashboardBySetId(version, setId, dashboard) {\n        return SysdigDashboardHelper.getHelper(version).filterDashboardBySetId(setId, dashboard);\n    }\n\n    static getHelper(version) {\n        if (version === 'v1') {\n            return SysdigDashboardHelperV1;\n        } else if (version === 'v2') {\n            return SysdigDashboardHelperV2;\n        } else {\n            throw {\n                name: 'Invalid parameter',\n                message: `Invalid dashboard version ${version}`\n            };\n        }\n    }\n}\n\nclass SysdigDashboardHelperV1 {\n    static convertToGrafana(sysdigDashboard, options) {\n        const panels = (sysdigDashboard.items || sysdigDashboard.widgets)\n            .map((panel, index) => {\n                const builder = this.getPanelBuilder(panel);\n                return builder.build(this.getParsers(), sysdigDashboard, options, panel, index);\n            })\n            .filter((r) => r !== null);\n\n        const isRowMandatory = getGrafanaVersion().indexOf('4.') === 0;\n        let dashboardPanelsConfiguration;\n        if (isRowMandatory) {\n            // convert grid layout to row spans\n            panels.forEach((panel) => {\n                panel.span = panel.gridPos.w / 2;\n            });\n\n            // define rows\n            dashboardPanelsConfiguration = {\n                rows: panels.reduce((acc, panel) => {\n                    if (acc.length === 0) {\n                        return [\n                            {\n                                panels: [panel]\n                            }\n                        ];\n                    } else if (acc[acc.length - 1].panels[0].gridPos.x < panel.gridPos.x) {\n                        acc[acc.length - 1].panels.push(panel);\n                    } else {\n                        acc.push({\n                            panels: [panel]\n                        });\n                    }\n\n                    return acc;\n                }, [])\n            };\n\n            // remove grid layout\n            panels.forEach((panel) => {\n                delete panel.gridPos;\n            });\n        } else {\n            dashboardPanelsConfiguration = { panels };\n        }\n\n        let categoryTags;\n        if (sysdigDashboard.category) {\n            categoryTags = sysdigDashboard.category\n                .split('.')\n                .reduce((acc, part) => {\n                    if (acc === null) {\n                        return [part];\n                    } else {\n                        return [...acc, `${acc[acc.length - 1]}.${part}`];\n                    }\n                }, null)\n                .map((categoryId) => {\n                    const category = options.categories.find(\n                        (category) => category.id === categoryId\n                    );\n\n                    if (category) {\n                        return category.name;\n                    } else {\n                        return null;\n                    }\n                })\n                .filter((category) => category !== null);\n        } else {\n            categoryTags = [];\n        }\n\n        return Object.assign(\n            {\n                schemaVersion: 6,\n                version: 0,\n                title: sysdigDashboard.name,\n                tags: [...(options.tags || []), ...categoryTags],\n                timezone: 'browser',\n                time: {\n                    // default Sysdig: last 1 hour\n                    from: 'now-1h',\n                    to: 'now'\n                },\n                graphTooltip: 1 // shared crosshair\n            },\n            dashboardPanelsConfiguration\n        );\n    }\n\n    static getPanelBuilder(panel) {\n        switch (panel.showAs) {\n            case 'timeSeries':\n                return TimeSeriesBuilder;\n\n            case 'timeSeriesArea':\n                return TimeSeriesAreaBuilder;\n\n            case 'histogram':\n                return HistogramBuilder;\n\n            case 'top':\n                return BarChartBuilder;\n\n            case 'summary':\n                return NumberBuilder;\n\n            case 'table':\n                return TableBuilder;\n\n            case 'text':\n                return TextBuilder;\n\n            default:\n                console.warn(`${panel.showAs} panels cannot be exported to Grafana`);\n                return DefaultBuilder;\n        }\n    }\n\n    static filterDashboardBySetId(setId, dashboard) {\n        switch (setId) {\n            case 'PRIVATE':\n                return dashboard.isShared === false;\n            case 'SHARED':\n                return dashboard.isShared === true;\n        }\n    }\n\n    static getParsers() {\n        return {\n            parseMetric: this.parseMetric\n        };\n    }\n\n    static parseMetric(metric) {\n        return Object.assign({}, metric, {\n            id: metric.metricId.replace(/%25/g, '.'),\n            timeAggregation: metric.timeAggregation || metric.aggregation\n        });\n    }\n}\n\nclass SysdigDashboardHelperV2 extends SysdigDashboardHelperV1 {\n    static filterDashboardBySetId(setId, dashboard) {\n        switch (setId) {\n            case 'PRIVATE':\n                return dashboard.shared === false;\n            case 'SHARED':\n                return dashboard.shared === true;\n        }\n    }\n\n    static parseMetric(metric) {\n        return Object.assign({}, metric, {\n            id: metric.id.replace(/%25/g, '.'),\n            timeAggregation: metric.timeAggregation || metric.aggregation\n        });\n    }\n}\n\nfunction getGrafanaVersion() {\n    return grafanaBootData &&\n        grafanaBootData.settings &&\n        grafanaBootData.settings.buildInfo &&\n        grafanaBootData.settings.buildInfo.version\n        ? grafanaBootData.settings.buildInfo.version\n        : 'n.a.';\n}\n\nconst GRAFANA_COLUMN_COUNT = 24;\nconst SYSDIG_COLUMN_COUNT = 12;\n\nclass BaseBuilder {\n    static getPanelType() {\n        return null;\n    }\n\n    static isSingleDataPoint() {\n        return false;\n    }\n\n    static isTabularFormat() {\n        return false;\n    }\n\n    static getTargetGridLayout(sysdigDashboard, sysdigPanel) {\n        let layout;\n        if (sysdigDashboard.items) {\n            const index = (sysdigDashboard.items || sysdigDashboard.widgets).indexOf(sysdigPanel);\n            layout = sysdigDashboard.layout[index];\n        } else {\n            layout = sysdigPanel.gridConfiguration;\n        }\n\n        // keep w/h ratio similar to Sysdig by reducing height by 80%\n        return {\n            h: Math.ceil((layout.size_y / SYSDIG_COLUMN_COUNT) * GRAFANA_COLUMN_COUNT * 0.8),\n            w: (layout.size_x / SYSDIG_COLUMN_COUNT) * GRAFANA_COLUMN_COUNT,\n            x: ((layout.col - 1) / SYSDIG_COLUMN_COUNT) * GRAFANA_COLUMN_COUNT,\n            y: Math.floor(((layout.row - 1) / SYSDIG_COLUMN_COUNT) * GRAFANA_COLUMN_COUNT * 0.8)\n        };\n    }\n\n    static getTargetFilter(sysdigDashboard, sysdigPanel) {\n        return sysdigPanel.scope || sysdigDashboard.filterExpression;\n    }\n\n    static getBasePanelConfiguration(sysdigDashboard, options, sysdigPanel, index) {\n        return {\n            type: this.getPanelType(),\n            datasource: options.datasourceName,\n            id: index,\n            title: sysdigPanel.name,\n            gridPos: this.getTargetGridLayout(sysdigDashboard, sysdigPanel)\n        };\n    }\n\n    static getValueFormat(valueMetric, metrics) {\n        const metricConfiguration = _.find(metrics, (m) => m.id === valueMetric.id);\n\n        if (metricConfiguration === undefined) {\n            // metric not found, return default format\n            return 'short';\n        } else {\n            // NOTE: For unit mapping, refer to public/app/core/utils/kbn.ts\n            const isRate = valueMetric.aggregation === 'timeAvg';\n            switch (metricConfiguration.type) {\n                case 'string':\n                case 'providerServiceEnum':\n                case 'bool':\n                    return 'none';\n\n                case 'int':\n                case 'number':\n                case 'double':\n                    return 'short';\n\n                case 'byte':\n                    if (isRate) {\n                        return 'Bps';\n                    } else {\n                        return 'bytes';\n                    }\n\n                case 'relativeTime':\n                    return 'ns';\n\n                case '%':\n                case 'ratio':\n                    return 'percent';\n\n                case 'date':\n                case 'dateTime':\n                case 'absoluteTime':\n                    return 'dateTimeAsIso';\n\n                default:\n                    return 'short';\n            }\n        }\n    }\n}\n\nclass TimeSeriesBuilder extends BaseBuilder {\n    static getPanelType() {\n        return 'graph';\n    }\n\n    static build(parsers, sysdigDashboard, options, sysdigPanel, index) {\n        return Object.assign(\n            {},\n            this.getBasePanelConfiguration(sysdigDashboard, options, sysdigPanel, index),\n            {\n                targets: this.buildTargets(parsers, sysdigDashboard, sysdigPanel),\n                legend: {\n                    show: false // retain Sysdig layout\n                },\n                yaxes: this.buildPanelYAxes(parsers, sysdigDashboard, sysdigPanel, options)\n            }\n        );\n    }\n\n    static getValues(parsers, sysdigDashboard, sysdigPanel) {\n        const values = sysdigPanel.metrics.map(parsers.parseMetric).filter((metric) => {\n            return metric.id !== 'timestamp' && metric.timeAggregation !== undefined;\n        });\n        if (values.length === 0) {\n            console.warn('Expected at least one value metric');\n        }\n\n        return values;\n    }\n\n    static getKeys(parsers, sysdigDashboard, sysdigPanel) {\n        const keys = sysdigPanel.metrics.map(parsers.parseMetric).filter((metric) => {\n            return metric.id !== 'timestamp' && metric.timeAggregation === undefined;\n        });\n        if (keys.length > 1) {\n            console.warn('Expected at most one key metric');\n        }\n\n        return keys;\n    }\n\n    static buildTargets(parsers, sysdigDashboard, sysdigPanel) {\n        const values = this.getValues(parsers, sysdigDashboard, sysdigPanel);\n        const keys = this.getKeys(parsers, sysdigDashboard, sysdigPanel);\n\n        return values.map((value, i) => {\n            return {\n                refId: i.toString(),\n                isSingleDataPoint: this.isSingleDataPoint(),\n                isTabularFormat: this.isTabularFormat(),\n                target: value.id,\n                timeAggregation: value.timeAggregation,\n                groupAggregation: value.groupAggregation,\n                segmentBy: keys.length > 0 ? keys.map((key) => key.id) : null,\n                filter: this.getTargetFilter(sysdigDashboard, sysdigPanel),\n                sortDirection: this.getTargetSortDirection(sysdigPanel),\n                pageLimit: this.getTargetPageLimit(sysdigPanel)\n            };\n        });\n    }\n\n    static getTargetSortDirection(sysdigPanel) {\n        const normalizedDisplayOptions = Object.assign(\n            {\n                valueLimit: {\n                    direction: null,\n                    count: null\n                }\n            },\n            sysdigPanel.customDisplayOptions\n        );\n\n        return normalizedDisplayOptions.valueLimit.direction || null;\n    }\n\n    static parseValueLimitCount(sysdigPanel) {\n        return sysdigPanel.customDisplayOptions &&\n            sysdigPanel.customDisplayOptions.valueLimit &&\n            Number.parseInt(sysdigPanel.customDisplayOptions.valueLimit.count, 10)\n            ? Number.parseInt(sysdigPanel.customDisplayOptions.valueLimit.count, 10)\n            : 10;\n    }\n\n    static getTargetPageLimit(sysdigPanel) {\n        return this.parseValueLimitCount(sysdigPanel);\n    }\n\n    static buildPanelYAxes(parsers, sysdigDashboard, sysdigPanel, options) {\n        const normalizedDisplayOptions = Object.assign({}, sysdigPanel.customDisplayOptions);\n\n        let yAxisLogBase;\n        if (normalizedDisplayOptions.yAxisScale) {\n            switch (normalizedDisplayOptions.yAxisScale) {\n                case 'logarithmic2':\n                    yAxisLogBase = 2;\n                    break;\n                case 'logarithmic10':\n                    yAxisLogBase = 10;\n                    break;\n                case 'logarithmic32':\n                    yAxisLogBase = 32;\n                    break;\n                case 'logarithmic1024':\n                    yAxisLogBase = 1024;\n                    break;\n                default:\n                    yAxisLogBase = 1;\n                    break;\n            }\n        } else {\n            yAxisLogBase = 1;\n        }\n\n        const baseAxisConfig = {\n            label: null,\n            logBase: 1,\n            min: null,\n            max: null,\n            show: false\n        };\n\n        const values = this.getValues(parsers, sysdigDashboard, sysdigPanel);\n\n        return [\n            // left axis\n            _.assign({}, baseAxisConfig, {\n                format: this.getValueFormat(values[0], options.metrics),\n                show: true,\n                min: normalizedDisplayOptions.yAxisLeftDomain\n                    ? normalizedDisplayOptions.yAxisLeftDomain.from\n                    : null,\n                max: normalizedDisplayOptions.yAxisLeftDomain\n                    ? normalizedDisplayOptions.yAxisLeftDomain.to\n                    : null,\n                logBase: yAxisLogBase\n            }),\n            // right axis\n            _.assign({}, baseAxisConfig)\n        ];\n    }\n}\n\nclass TimeSeriesAreaBuilder extends TimeSeriesBuilder {\n    static build(...args) {\n        return Object.assign({}, super.build(...args), {\n            stack: true,\n            fill: 7 // similar opacity used by Sysdig Monitor\n        });\n    }\n}\n\nclass HistogramBuilder extends TimeSeriesBuilder {\n    static isSingleDataPoint() {\n        return true;\n    }\n\n    static getValueFormat() {\n        // the axis will count items in each bucket\n        return 'short';\n    }\n\n    static build(parsers, sysdigDashboard, options, sysdigPanel, index) {\n        return Object.assign(\n            {},\n            super.build(parsers, sysdigDashboard, options, sysdigPanel, index),\n            {\n                bars: true,\n                lines: false,\n                xaxis: {\n                    buckets: sysdigPanel.customDisplayOptions\n                        ? sysdigPanel.customDisplayOptions.histogram.numberOfBuckets\n                        : 10,\n                    mode: 'histogram'\n                }\n            }\n        );\n    }\n\n    static getTargetPageLimit(sysdigPanel) {\n        // apply a \"premium\" x10 to limit the effect of data pagination to bucket values\n        // Grafana will get all the entities and will define buckets on top of that\n        // However, if pagination limits the number of entries exported via API, bucket values\n        // will not be correct.\n        return this.parseValueLimitCount(sysdigPanel) * 10;\n    }\n}\n\nclass BarChartBuilder extends TimeSeriesBuilder {\n    static isSingleDataPoint() {\n        return true;\n    }\n\n    static build(parsers, sysdigDashboard, options, sysdigPanel, index) {\n        return Object.assign(\n            {},\n            super.build(parsers, sysdigDashboard, options, sysdigPanel, index),\n            {\n                bars: true,\n                lines: false,\n                xaxis: {\n                    mode: 'series',\n                    values: ['total']\n                }\n            }\n        );\n    }\n}\n\nclass NumberBuilder extends BaseBuilder {\n    static getPanelType() {\n        return 'singlestat';\n    }\n\n    static isSingleDataPoint() {\n        return true;\n    }\n\n    static build(parsers, sysdigDashboard, options, sysdigPanel, index) {\n        const value = this.getValue(parsers, sysdigDashboard, sysdigPanel);\n\n        if (value) {\n            // TODO set proper format\n            const format = this.getValueFormat(value, options.metrics);\n\n            return Object.assign(\n                {},\n                this.getBasePanelConfiguration(sysdigDashboard, options, sysdigPanel, index),\n                {\n                    targets: this.buildTargets(parsers, sysdigDashboard, sysdigPanel),\n                    format\n                }\n            );\n        } else {\n            console.warn('number panel configuration not valid (missing value)');\n            return this.getBasePanelConfiguration(\n                sysdigDashboard,\n                options,\n                sysdigPanel,\n                index,\n                'singlestat'\n            );\n        }\n    }\n\n    static getValue(parsers, sysdigDashboard, sysdigPanel) {\n        const values = sysdigPanel.metrics\n            .map(parsers.parseMetric)\n            .filter((metric) => {\n                return metric.id !== 'timestamp' && metric.timeAggregation !== undefined;\n            })\n            .map(parsers.parseMetric);\n        if (values.length !== 1) {\n            console.warn('Expected exactly one value metric');\n        }\n\n        return values[0];\n    }\n\n    static buildTargets(parsers, sysdigDashboard, sysdigPanel) {\n        const value = this.getValue(parsers, sysdigDashboard, sysdigPanel);\n\n        return [\n            {\n                refId: '0',\n                isSingleDataPoint: this.isSingleDataPoint(),\n                isTabularFormat: this.isTabularFormat(),\n                segmentBy: null,\n                filter: this.getTargetFilter(sysdigDashboard, sysdigPanel),\n                target: value.id,\n                timeAggregation: value.timeAggregation,\n                groupAggregation: value.groupAggregation\n            }\n        ];\n    }\n}\n\nclass TableBuilder extends TimeSeriesBuilder {\n    static getPanelType() {\n        return 'table';\n    }\n\n    static isSingleDataPoint() {\n        return true;\n    }\n\n    static isTabularFormat() {\n        return true;\n    }\n\n    static build(parsers, sysdigDashboard, options, sysdigPanel, index) {\n        return Object.assign(\n            {},\n            super.build(parsers, sysdigDashboard, options, sysdigPanel, index),\n            {\n                transform: 'timeseries_aggregations',\n                sort: {\n                    col: 1,\n                    desc: true\n                },\n                styles: [\n                    ...sysdigPanel.metrics.map(parsers.parseMetric).map((metric) => {\n                        const format = this.getValueFormat(metric, options.metrics);\n                        if (format === 'none') {\n                            return {\n                                pattern: metric.id,\n                                type: 'string'\n                            };\n                        } else {\n                            return {\n                                pattern: metric.id,\n                                type: 'number',\n                                unit: format,\n                                decimals: 2\n                            };\n                        }\n                    }),\n                    {\n                        pattern: '/.*/',\n                        type: 'string'\n                    }\n                ]\n            }\n        );\n    }\n\n    static buildTargets(parsers, sysdigDashboard, sysdigPanel) {\n        const keys = this.getKeys(parsers, sysdigDashboard, sysdigPanel);\n        const filterMetrics = (metric) => metric.timeAggregation !== undefined;\n\n        return sysdigPanel.metrics\n            .map(parsers.parseMetric)\n            .filter(filterMetrics)\n            .map((value, i) => {\n                return {\n                    refId: i.toString(),\n                    isSingleDataPoint: this.isSingleDataPoint(),\n                    isTabularFormat: this.isTabularFormat(),\n                    target: value.id,\n                    timeAggregation: value.timeAggregation || 'concat',\n                    groupAggregation: value.groupAggregation || 'concat',\n                    segmentBy: keys.length > 0 ? keys.map((key) => key.id) : null,\n                    filter: this.getTargetFilter(sysdigDashboard, sysdigPanel),\n                    sortDirection: this.getTargetSortDirection(sysdigPanel),\n                    pageLimit: this.getTargetPageLimit(sysdigPanel)\n                };\n            });\n    }\n\n    static getKeys(parsers, sysdigDashboard, sysdigPanel) {\n        return sysdigPanel.metrics.map(parsers.parseMetric).filter((metric) => {\n            return metric.timeAggregation === undefined;\n        });\n    }\n}\n\nclass TextBuilder extends BaseBuilder {\n    static getPanelType() {\n        return 'text';\n    }\n\n    static build(parsers, sysdigDashboard, options, sysdigPanel, index) {\n        return Object.assign(\n            {},\n            this.getBasePanelConfiguration(sysdigDashboard, options, sysdigPanel, index),\n            {\n                mode: 'markdown',\n                content: this.getContent(sysdigPanel),\n                transparent: sysdigPanel.hasTransparentBackground === true\n            }\n        );\n    }\n\n    static getContent(sysdigPanel) {\n        return sysdigPanel.markdownSource;\n    }\n}\n\nclass DefaultBuilder extends BaseBuilder {\n    static build(parsers, sysdigDashboard, options, sysdigPanel, index) {\n        return Object.assign(\n            {},\n            this.getBasePanelConfiguration(sysdigDashboard, options, sysdigPanel, index),\n            {\n                mode: 'html',\n                content: this.getContent(sysdigPanel)\n            }\n        );\n    }\n\n    static getPanelType() {\n        return 'text';\n    }\n\n    static getContent(sysdigPanel) {\n        let panelType;\n        switch (sysdigPanel.showAs) {\n            case 'timeSeriesArea':\n                panelType = 'Area';\n                break;\n            case 'top':\n                panelType = 'Top list';\n                break;\n            case 'histogram':\n                panelType = 'Histogram';\n                break;\n            case 'map':\n                panelType = 'Topology';\n                break;\n            case 'summary':\n                panelType = 'Number';\n                break;\n            case 'table':\n                panelType = 'Table';\n                break;\n            default:\n                panelType = sysdigPanel.showAs;\n                break;\n        }\n\n        return `<div class=\"text-center muted\"><strong>${panelType}</strong> cannot be exported from Sysdig Monitor to Grafana.</div>`;\n    }\n}\n"]}