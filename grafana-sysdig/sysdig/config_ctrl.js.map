{"version":3,"sources":["../src/config_ctrl.js"],"names":["DashboardsService","CLOUD_URL","DEFAULT_ONPREM_URL","SysdigConfigCtrl","$q","backendSrv","planOptions","id","text","dashboardSets","title","importStatus","importMessage","current","access","isUrlNotEmpty","url","test","isOnprem","plan","q","withCredentials","headers","Authorization","jsonData","apiToken","undefined","dashboardSetId","testing","dashboardSet","filter","set","importFromSysdig","getBackendConfiguration","name","then","catch","error","delete","templateUrl"],"mappings":";;;;;;;;;;;;;;;AAeOA,6B;;;;;;;;;;;;;;;;;;;;;AAGDC,qB,GAAY,6B;AACZC,8B,GAAqB,2B;;wCAEdC,gB;AACT;AACA,0CAAYC,EAAZ,EAAgBC,UAAhB,EAA4B;AAAA;;AACxB,yBAAKC,WAAL,GAAmB,CACf,EAAEC,IAAI,OAAN,EAAeC,MAAM,iBAArB,EADe,EAEf,EAAED,IAAI,QAAN,EAAgBC,MAAM,cAAtB,EAFe,CAAnB;;AAKA,yBAAKC,aAAL,GAAqB,CACjB;AACIF,4BAAI,SADR;AAEIG,+BAAO,oBAFX;AAGIC,sCAAc,MAHlB;AAIIC,uCAAe;AAJnB,qBADiB,EAOjB,EAAEL,IAAI,SAAN,EAAiBG,OAAO,eAAxB,EAAyCC,cAAc,MAAvD,EAA+DC,eAAe,IAA9E,EAPiB,EAQjB,EAAEL,IAAI,QAAN,EAAgBG,OAAO,mBAAvB,EAA4CC,cAAc,MAA1D,EAAkEC,eAAe,IAAjF,EARiB,CAArB;;AAWA,yBAAKC,OAAL,CAAaC,MAAb,GAAsB,OAAtB;;AAEA,wBAAMC,gBAAgB,KAAKF,OAAL,CAAaG,GAAb,IAAoB,QAAQC,IAAR,CAAa,KAAKJ,OAAL,CAAaG,GAA1B,MAAmC,KAA7E;AACA,yBAAKH,OAAL,CAAaG,GAAb,GAAmBD,gBAAgB,KAAKF,OAAL,CAAaG,GAA7B,GAAmCf,SAAtD;AACA,yBAAKiB,QAAL,GAAgB,KAAKL,OAAL,CAAaG,GAAb,KAAqBf,SAArC;AACA,yBAAKkB,IAAL,GAAY,KAAKD,QAAL,GAAgB,KAAKZ,WAAL,CAAiB,CAAjB,CAAhB,GAAsC,KAAKA,WAAL,CAAiB,CAAjB,CAAlD;;AAEA,yBAAKc,CAAL,GAAShB,EAAT;AACA,yBAAKC,UAAL,GAAkBA,UAAlB;AACH;;;;8DAEyB;AACtB,+BAAO;AACHA,wCAAY,KAAKA,UADd;AAEHgB,6CAAiB,KAAKR,OAAL,CAAaQ,eAF3B;AAGHC,qCAAS;AACL,gDAAgB,kBADX;AAEL,oDAAoB,KAFf;AAGLC,2DAAyB,KAAKV,OAAL,CAAaW,QAAb,CAAsBC;AAH1C,6BAHN;AAQHA,sCAAU,KAAKZ,OAAL,CAAaW,QAAb,CAAsBC,QAR7B;AASHT,6DAA+B,KAAKH,OAAL,CAAaN;AATzC,yBAAP;AAWH;;;iDAEY;AACT,6BAAKW,QAAL,GAAgB,KAAKC,IAAL,CAAUZ,EAAV,KAAiB,QAAjC;;AAEA,4BAAI,KAAKW,QAAL,IAAiB,KAAKL,OAAL,CAAaG,GAAb,KAAqBf,SAA1C,EAAqD;AACjD,iCAAKY,OAAL,CAAaG,GAAb,GAAmBd,kBAAnB;AACH;AACJ;;;iEAE4B;AACzB,+BAAO,KAAKW,OAAL,CAAaN,EAAb,KAAoBmB,SAApB,IAAiC,KAAKb,OAAL,CAAaW,QAAb,CAAsBC,QAAtB,KAAmCC,SAA3E;AACH;;;qDAEgBC,c,EAAgB;AAC7B,6BAAKC,OAAL,GAAe,IAAf;;AAEA,4BAAMC,eAAe,KAAKpB,aAAL,CAAmBqB,MAAnB,CAA0B,UAACC,GAAD;AAAA,mCAASA,IAAIxB,EAAJ,KAAWoB,cAApB;AAAA,yBAA1B,EAA8D,CAA9D,CAArB;AACAE,qCAAalB,YAAb,GAA4B,WAA5B;AACAkB,qCAAajB,aAAb,GAA6B,IAA7B;;AAEAZ,0CAAkBgC,gBAAlB,CACI,KAAKC,uBAAL,EADJ,EAEI,KAAKpB,OAAL,CAAaqB,IAFjB,EAGIP,cAHJ,EAKKQ,IALL,CAKU,YAAM;AACRN,yCAAalB,YAAb,GAA4B,SAA5B;AACH,yBAPL,EAQKyB,KARL,CAQW,UAACC,KAAD,EAAW;AACdR,yCAAalB,YAAb,GAA4B,OAA5B;AACAkB,yCAAajB,aAAb,GAA6ByB,KAA7B;AACH,yBAXL;AAYH;;;uDAEkB;AACfrC,0CAAkBsC,MAAlB,CAAyB,KAAKjC,UAA9B;AACH;;;;;;;;AAGLF,6BAAiBoC,WAAjB,GAA+B,sBAA/B","file":"config_ctrl.js","sourcesContent":["//\n//  Copyright 2018 Draios Inc.\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n//\nimport DashboardsService from './dashboards_service';\nimport './css/config-editor.css!';\n\nconst CLOUD_URL = 'https://app.sysdigcloud.com';\nconst DEFAULT_ONPREM_URL = 'https://your-sysdig.local';\n\nexport class SysdigConfigCtrl {\n    /** @ngInject */\n    constructor($q, backendSrv) {\n        this.planOptions = [\n            { id: 'cloud', text: 'Basic/Pro Cloud' },\n            { id: 'onprem', text: 'Pro Software' }\n        ];\n\n        this.dashboardSets = [\n            {\n                id: 'DEFAULT',\n                title: 'Default dashboards',\n                importStatus: 'none',\n                importMessage: null\n            },\n            { id: 'PRIVATE', title: 'My dashboards', importStatus: 'none', importMessage: null },\n            { id: 'SHARED', title: 'Shared dashboards', importStatus: 'none', importMessage: null }\n        ];\n\n        this.current.access = 'proxy';\n\n        const isUrlNotEmpty = this.current.url && /^\\s*$/.test(this.current.url) === false;\n        this.current.url = isUrlNotEmpty ? this.current.url : CLOUD_URL;\n        this.isOnprem = this.current.url !== CLOUD_URL;\n        this.plan = this.isOnprem ? this.planOptions[1] : this.planOptions[0];\n\n        this.q = $q;\n        this.backendSrv = backendSrv;\n    }\n\n    getBackendConfiguration() {\n        return {\n            backendSrv: this.backendSrv,\n            withCredentials: this.current.withCredentials,\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Sysdig-Product': 'SDC',\n                Authorization: `Bearer ${this.current.jsonData.apiToken}`\n            },\n            apiToken: this.current.jsonData.apiToken,\n            url: `/api/datasources/proxy/${this.current.id}`\n        };\n    }\n\n    changePlan() {\n        this.isOnprem = this.plan.id === 'onprem';\n\n        if (this.isOnprem && this.current.url === CLOUD_URL) {\n            this.current.url = DEFAULT_ONPREM_URL;\n        }\n    }\n\n    isDashboardsImportDisabled() {\n        return this.current.id === undefined || this.current.jsonData.apiToken === undefined;\n    }\n\n    importDashboards(dashboardSetId) {\n        this.testing = null;\n\n        const dashboardSet = this.dashboardSets.filter((set) => set.id === dashboardSetId)[0];\n        dashboardSet.importStatus = 'executing';\n        dashboardSet.importMessage = null;\n\n        DashboardsService.importFromSysdig(\n            this.getBackendConfiguration(),\n            this.current.name,\n            dashboardSetId\n        )\n            .then(() => {\n                dashboardSet.importStatus = 'success';\n            })\n            .catch((error) => {\n                dashboardSet.importStatus = 'error';\n                dashboardSet.importMessage = error;\n            });\n    }\n\n    deleteDashboards() {\n        DashboardsService.delete(this.backendSrv);\n    }\n}\n\nSysdigConfigCtrl.templateUrl = 'partials/config.html';\n"]}