{"version":3,"sources":["../src/metrics_service.js"],"names":["_","ApiService","TimeService","TemplatingService","MetricsService","backend","metricsCache","isValid","backendSrv","$q","when","data","isLoading","promise","load","send","url","then","result","plottableMetricTypes","Object","values","map","metric","assign","isNumeric","indexOf","type","sort","a","b","id","localeCompare","setData","segmentationMetrics","templateSrv","query","options","queryOptions","validateLabelValuesQuery","evaluateUserTime","userTime","queryTimelines","timelines","agents","filter","t","from","to","length","sampling","reject","resolve","validateTimeWindow","requestTime","method","time","metrics","labelName","resolveQueryVariables","paging","d","validateLabelNamesQuery","findMetrics","regex","test","validateMetricsQuery","timestamp","Date","now"],"mappings":"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","file":"metrics_service.js","sourcesContent":["//\n//  Copyright 2018 Draios Inc.\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n//\nimport _ from 'lodash';\nimport ApiService from './api_service';\nimport TimeService from './time_service';\nimport TemplatingService from './templating_service';\n\nexport default class MetricsService {\n    static findMetrics(backend) {\n        if (metricsCache.isValid()) {\n            return backend.backendSrv.$q.when(metricsCache.data);\n        } else if (metricsCache.isLoading()) {\n            return metricsCache.promise;\n        } else {\n            return metricsCache.load(\n                ApiService.send(backend, {\n                    url: 'api/data/metrics?light=true'\n                })\n                    .then((result) => {\n                        const plottableMetricTypes = [\n                            '%',\n                            'byte',\n                            'date',\n                            'int',\n                            'number',\n                            'relativeTime'\n                        ];\n\n                        return Object.values(result.data)\n                            .map((metric) =>\n                                _.assign(metric, {\n                                    isNumeric: plottableMetricTypes.indexOf(metric.type) >= 0\n                                })\n                            )\n                            .sort((a, b) => a.id.localeCompare(b.id));\n                    })\n                    .then((data) => {\n                        metricsCache.setData(data);\n\n                        return data;\n                    })\n            );\n        }\n    }\n\n    static findSegmentations(backend, metric) {\n        if (metric) {\n            return ApiService.send(backend, {\n                url: `api/data/metrics/${metric}/segmentationMetrics`\n            }).then((result) => {\n                if (result.data.segmentationMetrics) {\n                    return result.data.segmentationMetrics.sort((a, b) => a.localeCompare(b));\n                } else {\n                    return [];\n                }\n            });\n        } else {\n            return backend.backendSrv.$q.when([]);\n        }\n    }\n\n    static queryMetrics(backend, templateSrv, query, options) {\n        let queryOptions;\n        if ((queryOptions = TemplatingService.validateLabelValuesQuery(query)) !== null) {\n            //\n            // return list of label values\n            //\n            let evaluateUserTime;\n            if (options.userTime === null) {\n                evaluateUserTime = TimeService.queryTimelines(backend).then(({ timelines }) => {\n                    if (\n                        timelines.agents.filter((t) => t.from !== null && t.to !== null).length > 0\n                    ) {\n                        return {\n                            from: (timelines.agents[0].to - timelines.agents[0].sampling) / 1000000,\n                            to: timelines.agents[0].to / 1000000,\n                            sampling: timelines.agents[0].sampling / 1000000\n                        };\n                    } else {\n                        return backend.backendSrv.$q.reject(\n                            'Unable to query metrics (data not available)'\n                        );\n                    }\n                });\n            } else {\n                evaluateUserTime = backend.backendSrv.$q.resolve(options.userTime);\n            }\n\n            return evaluateUserTime\n                .then((userTime) => TimeService.validateTimeWindow(backend, userTime))\n                .then((requestTime) => {\n                    return ApiService.send(backend, {\n                        method: 'POST',\n                        url: 'api/data/entity/metadata',\n                        data: {\n                            time: {\n                                from: requestTime.from * 1000000,\n                                to: requestTime.to * 1000000\n                            },\n                            metrics: [queryOptions.labelName],\n                            filter: TemplatingService.resolveQueryVariables(\n                                queryOptions.filter,\n                                templateSrv\n                            ),\n                            paging: { from: queryOptions.from, to: queryOptions.to }\n                        }\n                    });\n                })\n                .then((result) => result.data.data.map((d) => d[queryOptions.labelName]));\n        } else if ((queryOptions = TemplatingService.validateLabelNamesQuery(query)) !== null) {\n            //\n            // return list of label names\n            //\n            return this.findMetrics(backend).then((result) =>\n                result\n                    // filter out all tags/labels/other string metrics\n                    .filter(\n                        (metric) => metric.isNumeric === false && queryOptions.regex.test(metric.id)\n                    )\n                    .map((metric) => metric.id)\n            );\n        } else if ((queryOptions = TemplatingService.validateMetricsQuery(query)) !== null) {\n            //\n            // return list of metric names\n            //\n            return this.findMetrics(backend).then((result) =>\n                result\n                    // filter out all non tags/labels/other string metrics\n                    .filter((metric) => metric.isNumeric && queryOptions.regex.test(metric.id))\n                    .map((metric) => metric.id)\n            );\n        } else {\n            return backend.backendSrv.$q.when([]);\n        }\n    }\n}\n\nconst metricsCache = {\n    timestamp: null,\n    data: null,\n    promise: null,\n    load(promise) {\n        this.promise = promise;\n        return promise;\n    },\n    setData(data) {\n        this.timestamp = Date.now();\n        this.data = data;\n        this.promise = null;\n    },\n    isLoading() {\n        return this.isValid() === false && this.promise !== null;\n    },\n    isValid() {\n        return this.timestamp !== null && this.timestamp >= Date.now() - 60000;\n    }\n};\n"]}